version: 2.1

orbs:
  slack: circleci/slack@4.12.1

commands:
  ansible_installation:
    description: Installing Ansible used by configure server job
    steps:
      - run:
          name: Install Ansible
          command: apk add ansible

  awscli_installation:
    description: Install AWS cli commands used by configure server job
    steps:
      - run:
          name: Install aws/cli
          command: |
            apk add tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install          

  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks by a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:5}
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5}
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5}
  notify_on_failure:
      steps:
        - slack/notify:
            event: fail
            channel: $SLACK_DEFAULT_CHANNEL
            template: basic_fail_1
  notify_on_success:
      steps:
        - slack/notify:
            event: pass
            channel: $SLACK_DEFAULT_CHANNEL
            template: success_tagged_deployment_1

  revert-migrations:
    description: Revert last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            echo "$SUCCESS"
            # revert the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end code
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: build Back-end code
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build          
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end unit tests
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run backend unit test
          command: |
            cd backend
            npm run test
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true     

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end and check security vulnerabilities
          command: |
            exit 0
            npm audit
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Back-end
          command: |
            exit 0
            npm audit
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true 

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Check and validate back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5}

      - run:
          name: Check and validate front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" 
      - run:
          name: Setting back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment

  configure-infrastructure:
    docker:
      - image: python:3.12-rc-alpine3.17
    steps:
      - checkout
      - ansible_installation
      - awscli_installation
      - add_ssh_keys:
          fingerprints: ["a0:6a:4f:6b:ae:25:1f:7f:b5:c6:9d:e1:3c:92:89:c3"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible          
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true
    #  - destroy_environment   

  run-migrations:
    docker:
      - image: hanyshaker1/aws-and-node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]      
      - run:
          name: Run migrations
          command: |
             export TYPEORM_HOST=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)            
             export TYPEORM_PORT=5532
             cd backend
             npm install
             npm run premigrations
             npm run migrations 
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl --insecure https://kvdb.io/PxxAnHD2hpJrm2XjwZEmAz/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true
      #- destroy-environment  
     
  deploy-backend:
    docker:
      - image: hanyshaker1/aws-and-node
    steps:
      - checkout       
      - add_ssh_keys:
          fingerprints: ["a0:6a:4f:6b:ae:25:1f:7f:b5:c6:9d:e1:3c:92:89:c3"]
      - restore_cache:
          keys: [backend-build]           
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_HOST=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo $TYPEORM_HOST >> .circleci/ansible/inventory.txt
            echo "Contents  of the inventory.txt file is -------"
            cat .circleci/ansible/inventory.txt
            cd backend
            npm install
            npm run build
            echo "TYPEORM_ENTITIES=./dist/modules/domain/**/*.entity{.ts,.js}" > .env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> .env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
            echo "TYPEORM_MIGRATIONS_DIR=./dist/migrations" >> .env
            echo "TYPEORM_MIGRATIONS=./dist/migrations/*.ts" >> .env
            echo "NODE_ENV=production" >> .env
            tar -czf artifact.tar.gz dist/* package* .env
            cp artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/artifact.tar.gz
            ls ../.circleci/ansible/roles/deploy/
            cd ../.circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true
      #- destroy-environment
      #- revert-migrations

  deploy-frontend:
    docker:
      - image: hanyshaker1/aws-and-node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]       
      - run:
          name: Deploy Frontend
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
             echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" 
            # Build the frontend
            cd frontend
            echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" > .env
            npm install
            npm run build:prod
            # aws s3 sync dist s3://udapeople-project
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true
      #- destroy-environment  

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      # - checkout
      - run:
          name: Backend smoking test.
          command: |
            #export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            
            URL="http://$BACKEND_PUBLIC_IP:3030/api/status"
            # Use this to fail smoke test
            URL="http://h00a.com"
            if curl -s --head ${URL}
            then
              echo "It worked!"
              exit 0
            else
              echo "Rolling Back"
              exit 1
            fi
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true            
      - notify_on_failure
      - destroy_environment

  cloudfront-update:
    docker:
      - image: hanyshaker1/aws-and-node
    steps:
      - checkout
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl -k https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"

      - run:
          name: Update cloudfront distribution by new stack
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:5}" \
              --stack-name cloudfront-Stack  

  cleanup:
    docker:
      - image: hanyshaker1/aws-and-node
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID 
            echo [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]          
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
             only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-backend:
          requires: [run-migrations]
      - deploy-frontend:
          requires: [deploy-backend, deploy-infrastructure]      
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]