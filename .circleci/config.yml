version: 2.1

orbs:
  slack: circleci/slack@4.12.1

commands:
  ansible_installation:
    description: Installing Ansible used by configure server job
    steps:
      - run:
          name: Install Ansible
          command: apk add ansible

  awscli_installation:
    description: Install AWS cli commands used by configure server job
    steps:
      - run:
          name: Install aws/cli
          command: |
            apk add tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install          

  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks by a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:5}
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5}
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5}
  notify_on_failure:
      steps:
        - slack/notify:
            event: fail
            channel: $SLACK_DEFAULT_CHANNEL
            template: basic_fail_1
  notify_on_success:
      steps:
        - slack/notify:
            event: pass
            channel: $SLACK_DEFAULT_CHANNEL
            template: success_tagged_deployment_1

  revert-migrations:
    description: Revert last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            echo "$SUCCESS"
            # revert the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end code
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: build Back-end code
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build          
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end unit tests
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run backend unit test
          command: |
            cd backend
            npm run test
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true     

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end and check security vulnerabilities
          command: |
            exit 0
            npm audit
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Back-end
          command: |
            exit 0
            npm audit
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true 

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Check and validate back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5}

      - run:
          name: Check and validate front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" 
      - run:
          name: Setting back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment

  configure-infrastructure:
    docker:
      - image: python:3.12-rc-alpine3.17
    steps:
      - checkout
      - ansible_installation
      - awscli_installation
      - add_ssh_keys:
          fingerprints: ["a0:6a:4f:6b:ae:25:1f:7f:b5:c6:9d:e1:3c:92:89:c3"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible          
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true
    #  - destroy_environment   

  run-migrations:
    docker:
      - image: hanyshaker1/aws-and-node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]      
      # - run:
      #     name: Install aws/cli
      #     command: |
      #       sudo apt install -y tar gzip curl
      #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #       sudo unzip awscliv2.zip
      #       sudo ./aws/install
      - run:
          name: Run migrations
          command: |
             export TYPEORM_HOST=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)            
             export TYPEORM_PORT=5532
             export TYPEORM_USERNAME="postgres"
             export TYPEORM_PASSWORD="password"
             export TYPEORM_DATABASE="glee"
             echo $TYPEORM_DATABASE
             #cd backend
             #npm install
             #npm run migrations > migrations_dump.txt
      # - run:
      #     name: Send migration results to memstash
      #     command: |
      #       if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
      #       then
      #           curl --insecure https://kvdb.io/PxxAnHD2hpJrm2XjwZEmAz/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
      #       fi
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true
      #- destroy-environment  
  
  deploy-frontend:
    docker:
      - image: hanyshaker1/aws-and-node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]      
      - run:
          name: Deploy Frontend
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" 
            # Build the frontend
            cd frontend
            #echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" > .env
            #npm install
            npm run build
            ls
            aws s3 sync dist s3://udapeople-project
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
      - slack/notify:
          channel: udapeople-pipe-line-faliure
          event: fail
          ignore_errors: true
      #- destroy-environment
      #- revert-migrations
  
  # deploy-frontend:
  #   docker:
  #     - image: hanyshaker1/aws-and-node
  #   steps:
  #     - checkout    
  #     - run:
  #         name: Deploy Frontend
  #         command: |
  #           export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
  #            echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" 
  #           # Build the frontend
  #           cd frontend
  #           echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" > .env
  #           npm install
  #           npm run build:prod
  #           # aws s3 sync dist s3://udapeople-project
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
  #     - slack/notify:
  #         channel: udapeople-pipe-line-faliure
  #         event: fail
  #         ignore_errors: true
  #     #- destroy-environment
  #     #- revert-migrations      
                                                    

#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#     steps:
#       # Checkout code from git
#       - run:
#           name: Run migrations
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Send migration results to memstash
#           command: |
#             # Your code here
#             exit 1
#      # Here's where you will add some code to rollback on failure      

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      #- build-frontend
      #- build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
      #- scan-frontend:
      #    requires: [build-frontend]          
      #- scan-backend:
      #    requires: [build-backend]
      #- deploy-infrastructure:
      #    requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #    filters:
      #      branches:
      #       only: [main]
      #- configure-infrastructure:
      #    requires: [deploy-infrastructure]
      - run-migrations
      #    requires: [configure-infrastructure]
      #- deploy-frontend
      #    requires: [build-frontend, configure-infrastructure]
      #- deploy-backend:
      #    requires: [run-migrations]
      #- smoke-test:
      #    requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup:
      #    requires: [cloudfront-update]